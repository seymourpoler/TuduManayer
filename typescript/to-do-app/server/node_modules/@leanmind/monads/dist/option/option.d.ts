import { Nullable } from '../types';
import { Monad } from '../monad';
import { Matchable } from '../match';
declare abstract class Option<T> implements Monad<T>, Matchable<T, undefined> {
    static of<T>(value: Nullable<T>): Option<T>;
    static from<T>(matchable: Matchable<T, unknown>): Option<T>;
    abstract getOrElse(otherValue: T): T;
    abstract filter(predicate: (value: T) => boolean): Option<T>;
    abstract map<U>(transform: (value: T) => U): Option<U>;
    abstract flatMap<U>(transform: (value: T) => Option<U>): Option<U>;
    abstract match<U>(ifSome: (value: T) => U, ifNone: (_: undefined) => U): U;
    abstract isSome(): this is Some<T>;
    abstract isNone(): this is None<T>;
}
declare class Some<T> extends Option<T> {
    private value;
    constructor(value: T);
    getOrElse(_: T): T;
    filter(predicate: (value: T) => boolean): Option<T>;
    map<U>(transform: (value: T) => U): Option<U>;
    flatMap<U>(transform: (value: T) => Option<U>): Option<U>;
    match<U>(some: (value: T) => U, _: (_: never) => never): U;
    isNone(): this is None<T>;
    isSome(): this is Some<T>;
}
declare class None<T> extends Option<T> {
    getOrElse(value: T): T;
    filter(_: (value: T) => boolean): Option<T>;
    map<U>(_: (value: T) => U): Option<U>;
    flatMap<U>(_: (value: T) => Option<U>): Option<U>;
    match<U>(_: (_: never) => never, none: (noneValue: undefined) => U): U;
    isNone(): this is None<T>;
    isSome(): this is Some<T>;
}
export { Option, Some, None };
