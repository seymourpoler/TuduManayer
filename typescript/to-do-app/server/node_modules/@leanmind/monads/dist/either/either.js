class Either {
    static right(value) {
        return new Right(value);
    }
    static left(value) {
        return new Left(value);
    }
    static from(matchable) {
        return matchable.match((value) => Either.right(value), (value) => Either.left(value));
    }
    static catch(execute) {
        try {
            return Either.right(execute());
        }
        catch (error) {
            return error instanceof Error ? Either.left(error) : Either.left(new Error('Unknown error'));
        }
    }
}
class Left extends Either {
    value;
    constructor(value) {
        super();
        this.value = value;
    }
    map(_) {
        return new Left(this.value);
    }
    mapLeft(f) {
        return new Left(f(this.value));
    }
    flatMap(_) {
        return new Left(this.value);
    }
    match(_, ifLeft) {
        return ifLeft(this.value);
    }
    isLeft() {
        return true;
    }
    isRight() {
        return false;
    }
    flatMapLeft(f) {
        return f(this.value);
    }
}
class Right extends Either {
    value;
    constructor(value) {
        super();
        this.value = value;
    }
    map(f) {
        return new Right(f(this.value));
    }
    mapLeft(_) {
        return new Right(this.value);
    }
    flatMap(f) {
        return f(this.value);
    }
    match(ifRight, _) {
        return ifRight(this.value);
    }
    isLeft() {
        return false;
    }
    isRight() {
        return true;
    }
    flatMapLeft(_) {
        return new Right(this.value);
    }
}
export { Either, Right, Left };
