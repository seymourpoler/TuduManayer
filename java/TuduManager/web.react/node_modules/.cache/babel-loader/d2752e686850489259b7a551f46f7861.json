{"ast":null,"code":"var _jsxFileName = \"/home/seymourpoler/Documents/code/GitHub/PetProjects/TuduManayer/java/TuduManager/web.react/src/todo/manage/ManageTodoView.js\";\nimport React from 'react';\nimport { Spinner } from '../../Spinner';\nimport { createManageTodoPresenter } from './ManageTodoPresenter';\nimport { ErrorMessages } from '../../ErrorMessages';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nexport class ManageTodoView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.presenter = createManageTodoPresenter(this);\n\n    this.btnEditTodo = (cell, row, enumObject, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        onClick: () => {\n          this.presenter.editTodo(row.id);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }\n      }, \" edit \");\n    };\n\n    this.btnDeleteTodo = (cell, row, enumObject, rowIndex) => {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        onClick: () => {\n          this.presenter.deleteTodo(row.id);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 17\n        }\n      }, \" delete \");\n    };\n\n    this.onSearchTextChangedHandler = event => {\n      this.setState({\n        searchText: event.target.value\n      });\n    };\n\n    this.onSearchClickedHandler = event => {\n      this.presenter.search(this.state.searchText);\n    };\n\n    this.onNewTodoClickedHandler = () => {\n      this.presenter.createNewTodo();\n    };\n\n    this.showSpinner = () => {\n      this.setState({\n        showSpinner: true\n      });\n    };\n\n    this.hideSpinner = () => {\n      this.setState({\n        showSpinner: false\n      });\n    };\n\n    this.cleanMessages = () => {\n      this.setState({\n        errorMessage: ''\n      });\n    };\n\n    this.showInternalServerError = () => {\n      this.setState({\n        errorMessage: ErrorMessages.InternalServerError\n      });\n    };\n\n    this.showTodos = todos => {\n      this.setState({\n        todos\n      });\n    };\n\n    this.redirectToCreateNewTodo = () => {\n      this.props.history.push(\"/create\");\n    };\n\n    this.redirectToEditTodo = todoId => {\n      this.props.history.push(\"/todos/\" + todoId);\n    };\n\n    this.state = {\n      showSpinner: false,\n      searchText: '',\n      todos: [],\n      errorMessage: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      show: this.state.showSpinner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.onNewTodoClickedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    }, \" new \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: this.onSearchTextChangedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.onSearchClickedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 84\n      }\n    }, \" search \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }\n    }, this.state.errorMessage), /*#__PURE__*/React.createElement(BootstrapTable, {\n      data: this.state.todos,\n      striped: true,\n      hover: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableHeaderColumn, {\n      isKey: true,\n      dataField: \"id\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 23\n      }\n    }, \"ID\"), /*#__PURE__*/React.createElement(TableHeaderColumn, {\n      dataField: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 23\n      }\n    }, \"Title\"), /*#__PURE__*/React.createElement(TableHeaderColumn, {\n      dataField: \"button\",\n      dataFormat: this.btnEditTodo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(TableHeaderColumn, {\n      dataField: \"button\",\n      dataFormat: this.btnDeleteTodo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 23\n      }\n    })));\n  }\n\n}\nexport function createManageTodoView() {\n  return new ManageTodoView();\n}","map":{"version":3,"sources":["/home/seymourpoler/Documents/code/GitHub/PetProjects/TuduManayer/java/TuduManager/web.react/src/todo/manage/ManageTodoView.js"],"names":["React","Spinner","createManageTodoPresenter","ErrorMessages","BootstrapTable","TableHeaderColumn","ManageTodoView","Component","constructor","props","presenter","btnEditTodo","cell","row","enumObject","rowIndex","editTodo","id","btnDeleteTodo","deleteTodo","onSearchTextChangedHandler","event","setState","searchText","target","value","onSearchClickedHandler","search","state","onNewTodoClickedHandler","createNewTodo","showSpinner","hideSpinner","cleanMessages","errorMessage","showInternalServerError","InternalServerError","showTodos","todos","redirectToCreateNewTodo","history","push","redirectToEditTodo","todoId","render","createManageTodoView"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Spinner } from '../../Spinner';\nimport { createManageTodoPresenter } from './ManageTodoPresenter';\nimport { ErrorMessages } from '../../ErrorMessages';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\n\nexport class ManageTodoView extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            showSpinner: false,\n            searchText: '',\n            todos: [],\n            errorMessage: ''\n        }\n    }\n\n    presenter = createManageTodoPresenter(this);\n\n    btnEditTodo = (cell, row, enumObject, rowIndex) => {\n        return (<button type=\"button\"\n            onClick={() => {\n                this.presenter.editTodo(row.id);\n            }}> edit </button>)\n    }\n\n    btnDeleteTodo = (cell, row, enumObject, rowIndex) => {\n        return (<button type=\"button\"\n            onClick={() => {\n                this.presenter.deleteTodo(row.id);\n            }}> delete </button>)\n    }\n\n\n    render(){\n        return (\n                <div>\n                    <Spinner show={this.state.showSpinner}/>\n                    <button onClick={this.onNewTodoClickedHandler} > new </button>\n                    <input type='text' onChange={this.onSearchTextChangedHandler}/><button onClick={this.onSearchClickedHandler}> search </button>\n                    <p>{this.state.errorMessage}</p>\n                    <BootstrapTable data={this.state.todos} striped hover>\n                      <TableHeaderColumn isKey dataField='id'>ID</TableHeaderColumn>\n                      <TableHeaderColumn dataField='title'>Title</TableHeaderColumn>\n                      <TableHeaderColumn dataField='button' dataFormat={this.btnEditTodo} />\n                      <TableHeaderColumn dataField='button' dataFormat={this.btnDeleteTodo} />\n                  </BootstrapTable>\n                </div>);\n    }\n\n    onSearchTextChangedHandler = (event) => {\n        this.setState({ searchText: event.target.value });\n    }\n\n    onSearchClickedHandler = (event) => {\n        this.presenter.search(this.state.searchText);\n    }\n\n    onNewTodoClickedHandler = () => {\n        this.presenter.createNewTodo();\n    }\n\n    showSpinner = () => {\n        this.setState({ showSpinner: true });\n    }\n\n    hideSpinner = () => {\n        this.setState({ showSpinner: false });\n    }\n\n    cleanMessages = () => {\n        this.setState({errorMessage: ''});\n    }\n\n\n    showInternalServerError = () => {\n        this.setState({ errorMessage: ErrorMessages.InternalServerError });\n    }\n\n    showTodos = (todos) => {\n        this.setState({ todos });\n    }\n\n    redirectToCreateNewTodo = () => {\n        this.props.history.push(\"/create\");\n    }\n\n    redirectToEditTodo = (todoId) => {\n        this.props.history.push(\"/todos/\" + todoId);\n    }\n}\n\nexport function createManageTodoView(){\n    return new ManageTodoView();\n}"]},"metadata":{},"sourceType":"module"}