{"ast":null,"code":"var _jsxFileName = \"/home/seymourpoler/Documents/code/GitHub/PetProjects/TuduManayer/java/TuduManager/web.react/src/todo/create/CreateTodoView.js\";\nimport React from 'react';\nimport { Spinner } from '../../Spinner';\nimport { createCreateTodoPresenter } from './CreateTodoPresenter';\nimport { ErrorMessages } from '../../ErrorMessages';\nexport class CreateTodoView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.presenter = createCreateTodoPresenter(this);\n\n    this.onTitleChangedHandler = event => {\n      this.setState({\n        title: event.target.value\n      });\n    };\n\n    this.onDescriptionChangedHandler = event => {\n      this.setState({\n        description: event.target.value\n      });\n    };\n\n    this.onSaveClickedHandler = event => {\n      this.presenter.save({\n        title: this.state.title,\n        description: this.state.description\n      });\n    };\n\n    this.onCancelClickedHandler = event => {\n      this.presenter.cancel();\n    };\n\n    this.cleanMessages = () => {\n      this.setState({\n        message: ''\n      });\n      this.setState({\n        errorMessage: ''\n      });\n      this.setState({\n        titleErrorMessage: ''\n      });\n      this.setState({\n        descriptionErrorMessage: ''\n      });\n    };\n\n    this.showSpinner = () => {\n      this.setState({\n        showSpinner: true\n      });\n    };\n\n    this.hideSpinner = () => {\n      this.setState({\n        showSpinner: false\n      });\n    };\n\n    this.showInternalServerError = () => {\n      this.setState({\n        errorMessage: ErrorMessages.InternalServerError\n      });\n    };\n\n    this.showErrors = errors => {\n      errors.forEach(error => {\n        const message = ErrorMessages[error.errorCode];\n\n        if (error.fieldId === 'title') {\n          this.setState({\n            titleErrorMessage: message\n          });\n          return;\n        }\n\n        this.setState({\n          descriptionErrorMessage: message\n        });\n      });\n    };\n\n    this.showTodoCreated = () => {\n      this.setState({\n        message: 'todo created'\n      });\n    };\n\n    this.redirectToPageBefore = () => {\n      this.props.history.push('/search');\n    };\n\n    this.state = {\n      showSpinner: false,\n      title: '',\n      titleErrorMessage: '',\n      description: '',\n      descriptionErrorMessage: '',\n      errorMessage: '',\n      message: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      show: this.state.showSpinner,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, \"Title: \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"txtTitle\",\n      onChange: this.onTitleChangedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 23\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"lblTitleErrorMessage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, this.state.titleErrorMessage), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }, \"Description: \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"txtDescription\",\n      onChange: this.onDescriptionChangedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"lblDescriptionErrorMessage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, this.state.descriptionErrorMessage), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.onSaveClickedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, \"Save\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.onCancelClickedHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, \"Cancel\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }\n    }, this.state.errorMessage), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, this.state.message));\n  }\n\n}\nexport function createCreateTodoView() {\n  return new CreateTodoView();\n}","map":{"version":3,"sources":["/home/seymourpoler/Documents/code/GitHub/PetProjects/TuduManayer/java/TuduManager/web.react/src/todo/create/CreateTodoView.js"],"names":["React","Spinner","createCreateTodoPresenter","ErrorMessages","CreateTodoView","Component","constructor","props","presenter","onTitleChangedHandler","event","setState","title","target","value","onDescriptionChangedHandler","description","onSaveClickedHandler","save","state","onCancelClickedHandler","cancel","cleanMessages","message","errorMessage","titleErrorMessage","descriptionErrorMessage","showSpinner","hideSpinner","showInternalServerError","InternalServerError","showErrors","errors","forEach","error","errorCode","fieldId","showTodoCreated","redirectToPageBefore","history","push","render","createCreateTodoView"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Spinner } from '../../Spinner';\nimport { createCreateTodoPresenter } from './CreateTodoPresenter';\nimport { ErrorMessages } from '../../ErrorMessages';\n\nexport class CreateTodoView extends React.Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            showSpinner: false,\n            title: '',\n            titleErrorMessage: '',\n            description: '',\n            descriptionErrorMessage: '',\n            errorMessage: '',\n            message: '',\n        }\n    }\n\n    presenter = createCreateTodoPresenter(this);\n\n    render(){\n        return(<div>\n            <Spinner show={this.state.showSpinner}/>\n            <p>Title: <input type='text' id='txtTitle' onChange={this.onTitleChangedHandler} /></p>\n            <p id='lblTitleErrorMessage'>{this.state.titleErrorMessage}</p>\n            <p>Description: <input type='text' id='txtDescription' onChange={this.onDescriptionChangedHandler} /></p>\n            <p id='lblDescriptionErrorMessage'>{this.state.descriptionErrorMessage}</p>\n            <button onClick={this.onSaveClickedHandler}>Save</button>\n            <button onClick={this.onCancelClickedHandler}>Cancel</button>\n            <p>{this.state.errorMessage}</p>\n            <p>{this.state.message}</p>\n        </div>);\n    }\n\n    onTitleChangedHandler = (event) => {\n        this.setState({ title: event.target.value });\n    }\n\n    onDescriptionChangedHandler = (event) => {\n        this.setState({ description: event.target.value });\n    }\n\n    onSaveClickedHandler = (event) => {\n        this.presenter.save({\n            title: this.state.title,\n            description: this.state.description\n        });\n    }\n\n    onCancelClickedHandler = (event) => {\n        this.presenter.cancel();\n    }\n\n    cleanMessages = () => {\n        this.setState({ message: '' });\n        this.setState({ errorMessage: '' });\n        this.setState({ titleErrorMessage: '' });\n        this.setState({ descriptionErrorMessage: '' });\n    }\n\n    showSpinner = () => {\n        this.setState({ showSpinner: true });\n    }\n\n    hideSpinner = () => {\n        this.setState({ showSpinner: false });\n    }\n\n\n    showInternalServerError = () => {\n        this.setState({ errorMessage: ErrorMessages.InternalServerError });\n    }\n\n    showErrors = (errors) => {\n        errors.forEach(error => {\n            const message = ErrorMessages[error.errorCode];\n            if(error.fieldId === 'title'){\n                this.setState({ titleErrorMessage: message });\n                return;\n            }\n            this.setState({ descriptionErrorMessage: message });\n        });\n    }\n\n    showTodoCreated = () => {\n        this.setState({ message: 'todo created' });\n    }\n\n    redirectToPageBefore = () => {\n        this.props.history.push('/search');\n    }\n}\n\nexport function createCreateTodoView(){\n    return new CreateTodoView();\n}\n"]},"metadata":{},"sourceType":"module"}