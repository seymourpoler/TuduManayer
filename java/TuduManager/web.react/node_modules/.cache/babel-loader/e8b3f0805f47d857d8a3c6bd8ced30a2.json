{"ast":null,"code":"export function Http() {\n  let self = this;\n\n  self.get = async url => {\n    const response = await fetch(url);\n    return buildResultFrom(response);\n  };\n\n  self.post = async (url, entity) => {\n    const response = await fetch(url, {\n      method: 'POST',\n      cache: 'no-cache',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify(entity)\n    });\n    return await buildResultFrom(response);\n  };\n\n  self.put = async (url, entity) => {\n    const response = await fetch(url, {\n      method: 'PUT',\n      cache: 'no-cache',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify(entity)\n    });\n    return await buildResultFrom(response);\n  };\n\n  async function buildResultFrom(response) {\n    const body = await buildBody(response);\n    return {\n      statusCode: response.status,\n      body\n    };\n  }\n\n  async function buildBody(response) {\n    try {\n      return await response.json();\n    } catch {\n      return {};\n    }\n  }\n}\nexport function createHttp() {\n  return new Http();\n}","map":{"version":3,"sources":["/home/seymourpoler/Documents/code/GitHub/PetProjects/TuduManayer/java/TuduManager/web.react/src/Http.js"],"names":["Http","self","get","url","response","fetch","buildResultFrom","post","entity","method","cache","headers","body","JSON","stringify","put","buildBody","statusCode","status","json","createHttp"],"mappings":"AAAA,OAAO,SAASA,IAAT,GAAe;AAClB,MAAIC,IAAI,GAAG,IAAX;;AAEHA,EAAAA,IAAI,CAACC,GAAL,GAAW,MAAOC,GAAP,IAAe;AACzB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACM,WAAOG,eAAe,CAACF,QAAD,CAAtB;AACN,GAHD;;AAKAH,EAAAA,IAAI,CAACM,IAAL,GAAY,OAAOJ,GAAP,EAAYK,MAAZ,KAAuB;AAClC,UAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AACjCM,MAAAA,MAAM,EAAE,MADyB;AAExBC,MAAAA,KAAK,EAAE,UAFiB;AAGjCC,MAAAA,OAAO,EAAE;AACR,wBAAgB;AADR,OAHwB;AAMxBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf;AANkB,KAAN,CAA5B;AAQM,WAAO,MAAMF,eAAe,CAACF,QAAD,CAA5B;AACN,GAVD;;AAYGH,EAAAA,IAAI,CAACc,GAAL,GAAW,OAAOZ,GAAP,EAAYK,MAAZ,KAAuB;AAC9B,UAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAM;AAC9BM,MAAAA,MAAM,EAAE,KADsB;AAE9BC,MAAAA,KAAK,EAAE,UAFuB;AAG9BC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAHqB;AAM9BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf;AANwB,KAAN,CAA5B;AAQA,WAAO,MAAMF,eAAe,CAACF,QAAD,CAA5B;AACH,GAVD;;AAYA,iBAAeE,eAAf,CAA+BF,QAA/B,EAAwC;AACpC,UAAMQ,IAAI,GAAG,MAAMI,SAAS,CAACZ,QAAD,CAA5B;AACA,WAAO;AACHa,MAAAA,UAAU,EAAEb,QAAQ,CAACc,MADlB;AAEHN,MAAAA;AAFG,KAAP;AAIH;;AAED,iBAAeI,SAAf,CAAyBZ,QAAzB,EAAkC;AAC9B,QAAG;AACC,aAAO,MAAMA,QAAQ,CAACe,IAAT,EAAb;AACH,KAFD,CAEC,MAAK;AACF,aAAO,EAAP;AACH;AACJ;AACJ;AAED,OAAO,SAASC,UAAT,GAAqB;AAC3B,SAAO,IAAIpB,IAAJ,EAAP;AACA","sourcesContent":["export function Http(){\n    let self = this;\n\t\n\tself.get = async (url) => {\n\t\tconst response = await fetch(url);\n        return buildResultFrom(response);\n\t};\n\n\tself.post = async (url, entity) => {\n\t\tconst response = await fetch(url, {\n\t\t\tmethod: 'POST',\n            cache: 'no-cache',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json;charset=utf-8'\n\t\t\t},\n            body: JSON.stringify(entity)\n\t\t});\n        return await buildResultFrom(response);\n\t}\n\n    self.put = async (url, entity) => {\n        const response = await fetch(url, {\n            method: 'PUT',\n            cache: 'no-cache',\n            headers: {\n                'Content-Type': 'application/json;charset=utf-8'\n            },\n            body: JSON.stringify(entity)\n        });\n        return await buildResultFrom(response);\n    }\n\n    async function buildResultFrom(response){\n        const body = await buildBody(response);\n        return {\n            statusCode: response.status,\n            body\n        }\n    }\n\n    async function buildBody(response){\n        try{\n            return await response.json();\n        }catch{\n            return {};\n        }\n    }\n}\n\nexport function createHttp(){\n\treturn new Http();\n}\n"]},"metadata":{},"sourceType":"module"}