{"ast":null,"code":"import { HttpStatusCode } from \"../../HttpStatusCode\";\nimport { createHttp } from \"../../Http\";\nexport function EditTodoService(http) {\n  let self = this;\n  const url = '/api/todos';\n\n  self.find = async function (todoId) {\n    const response = await http.get(url + '/' + todoId);\n\n    if (response.statusCode === HttpStatusCode.internalServerError) {\n      return {\n        statusCode: HttpStatusCode.internalServerError\n      };\n    }\n\n    if (response.statusCode === HttpStatusCode.badRequest) {\n      return {\n        statusCode: HttpStatusCode.badRequest\n      };\n    }\n\n    throw 'not implemented';\n  };\n\n  self.update = async function (todo) {\n    const response = await http.put(url, JSON.stringify(todo));\n\n    if (response.statusCode === HttpStatusCode.badRequest) {\n      return {\n        statusCode: response.statusCode,\n        errors: response.body\n      };\n    }\n\n    return {\n      statusCode: response.statusCode\n    };\n  };\n}\nexport function createEditTodoService() {\n  const http = createHttp();\n  return new EditTodoService(http);\n}","map":{"version":3,"sources":["/home/seymourpoler/Documents/code/GitHub/PetProjects/TuduManayer/java/TuduManager/web.react/src/todo/edit/EditTodoService.js"],"names":["HttpStatusCode","createHttp","EditTodoService","http","self","url","find","todoId","response","get","statusCode","internalServerError","badRequest","update","todo","put","JSON","stringify","errors","body","createEditTodoService"],"mappings":"AAAA,SAAQA,cAAR,QAA6B,sBAA7B;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA8B;AACjC,MAAIC,IAAI,GAAG,IAAX;AACA,QAAMC,GAAG,GAAG,YAAZ;;AAEAD,EAAAA,IAAI,CAACE,IAAL,GAAY,gBAAeC,MAAf,EAAsB;AAC9B,UAAMC,QAAQ,GAAG,MAAML,IAAI,CAACM,GAAL,CAASJ,GAAG,GAAG,GAAN,GAAYE,MAArB,CAAvB;;AACA,QAAGC,QAAQ,CAACE,UAAT,KAAwBV,cAAc,CAACW,mBAA1C,EAA8D;AAC1D,aAAQ;AAACD,QAAAA,UAAU,EAAEV,cAAc,CAACW;AAA5B,OAAR;AACH;;AACD,QAAGH,QAAQ,CAACE,UAAT,KAAwBV,cAAc,CAACY,UAA1C,EAAqD;AACjD,aAAQ;AAACF,QAAAA,UAAU,EAAEV,cAAc,CAACY;AAA5B,OAAR;AACH;;AACD,UAAM,iBAAN;AACH,GATD;;AAWAR,EAAAA,IAAI,CAACS,MAAL,GAAc,gBAAeC,IAAf,EAAqB;AAC/B,UAAMN,QAAQ,GAAG,MAAML,IAAI,CAACY,GAAL,CAASV,GAAT,EAAcW,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAd,CAAvB;;AACA,QAAGN,QAAQ,CAACE,UAAT,KAAwBV,cAAc,CAACY,UAA1C,EAAqD;AACjD,aAAO;AACHF,QAAAA,UAAU,EAAEF,QAAQ,CAACE,UADlB;AAEHQ,QAAAA,MAAM,EAAEV,QAAQ,CAACW;AAFd,OAAP;AAIH;;AAED,WAAO;AACHT,MAAAA,UAAU,EAAEF,QAAQ,CAACE;AADlB,KAAP;AAGH,GAZD;AAaH;AAED,OAAO,SAASU,qBAAT,GAAiC;AACpC,QAAMjB,IAAI,GAAGF,UAAU,EAAvB;AACA,SAAO,IAAIC,eAAJ,CAAoBC,IAApB,CAAP;AACH","sourcesContent":["import {HttpStatusCode} from \"../../HttpStatusCode\";\nimport {createHttp} from \"../../Http\";\n\nexport function EditTodoService(http){\n    let self = this;\n    const url = '/api/todos';\n\n    self.find = async function(todoId){\n        const response = await http.get(url + '/' + todoId);\n        if(response.statusCode === HttpStatusCode.internalServerError){\n            return  {statusCode: HttpStatusCode.internalServerError};\n        }\n        if(response.statusCode === HttpStatusCode.badRequest){\n            return  {statusCode: HttpStatusCode.badRequest};\n        }\n        throw 'not implemented';\n    }\n\n    self.update = async function(todo) {\n        const response = await http.put(url, JSON.stringify(todo));\n        if(response.statusCode === HttpStatusCode.badRequest){\n            return {\n                statusCode: response.statusCode,\n                errors: response.body\n            }\n        }\n\n        return {\n            statusCode: response.statusCode\n        }\n    }\n}\n\nexport function createEditTodoService() {\n    const http = createHttp();\n    return new EditTodoService(http);\n}"]},"metadata":{},"sourceType":"module"}